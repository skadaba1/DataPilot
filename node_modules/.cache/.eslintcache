[{"/Users/samkadaba/Desktop/Harvest.ai/demo/src/index.js":"1","/Users/samkadaba/Desktop/Harvest.ai/demo/src/App.js":"2","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/Landing.js":"3","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/LanguagesDropdown.js":"4","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/CodeEditorWindow.js":"5","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/OutputDetails.js":"6","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/Footer.js":"7","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/ThemeDropdown.js":"8","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/OutputWindow.js":"9","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/Copilot.js":"10","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/CustomInput.js":"11","/Users/samkadaba/Desktop/Harvest.ai/demo/src/hooks/useKeyPress.js":"12","/Users/samkadaba/Desktop/Harvest.ai/demo/src/utils/general.js":"13","/Users/samkadaba/Desktop/Harvest.ai/demo/src/lib/defineTheme.js":"14","/Users/samkadaba/Desktop/Harvest.ai/demo/src/constants/languageOptions.js":"15","/Users/samkadaba/Desktop/Harvest.ai/demo/src/constants/customStyles.js":"16"},{"size":219,"mtime":1699092585009,"results":"17","hashOfConfig":"18"},{"size":127,"mtime":1699092585006,"results":"19","hashOfConfig":"18"},{"size":10007,"mtime":1699100595184,"results":"20","hashOfConfig":"18"},{"size":519,"mtime":1699092585007,"results":"21","hashOfConfig":"18"},{"size":846,"mtime":1699099805277,"results":"22","hashOfConfig":"18"},{"size":772,"mtime":1699092585007,"results":"23","hashOfConfig":"18"},{"size":4834,"mtime":1699092585006,"results":"24","hashOfConfig":"18"},{"size":620,"mtime":1699092585007,"results":"25","hashOfConfig":"18"},{"size":1345,"mtime":1699094710123,"results":"26","hashOfConfig":"18"},{"size":8388,"mtime":1699106596639,"results":"27","hashOfConfig":"18"},{"size":599,"mtime":1699092585006,"results":"28","hashOfConfig":"18"},{"size":681,"mtime":1699092585009,"results":"29","hashOfConfig":"18"},{"size":69,"mtime":1699092585009,"results":"30","hashOfConfig":"18"},{"size":1954,"mtime":1699092585009,"results":"31","hashOfConfig":"18"},{"size":4771,"mtime":1699092585009,"results":"32","hashOfConfig":"18"},{"size":1162,"mtime":1699092585009,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"6ajjtb",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/samkadaba/Desktop/Harvest.ai/demo/src/index.js",[],[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/App.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/Landing.js",["85","86","87","88","89","90","91","92","93","94","95"],[],"import React, { useEffect, useState } from \"react\";\nimport CodeEditorWindow from \"./CodeEditorWindow\";\nimport axios from \"axios\";\nimport { classnames } from \"../utils/general\";\nimport { languageOptions } from \"../constants/languageOptions\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { defineTheme } from \"../lib/defineTheme\";\nimport useKeyPress from \"../hooks/useKeyPress\";\nimport Footer from \"./Footer\";\nimport OutputWindow from \"./OutputWindow\";\nimport Copilot from \"./Copilot\";\nimport CustomInput from \"./CustomInput\";\nimport OutputDetails from \"./OutputDetails\";\nimport ThemeDropdown from \"./ThemeDropdown\";\nimport LanguagesDropdown from \"./LanguagesDropdown\";\nimport { Sidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\n\nimport harvest_logo from \"./harvest_logo_white.png\"\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFileCode, faFileExcel } from '@fortawesome/free-regular-svg-icons';\n\nconst javascriptDefault = `/**\n* Problem: Binary Search: Search a sorted array for a target value.\n*/\n\n// Time: O(log n)\nconst binarySearch = (arr, target) => {\n return binarySearchHelper(arr, target, 0, arr.length - 1);\n};\n\nconst binarySearchHelper = (arr, target, start, end) => {\n if (start > end) {\n   return false;\n }\n let mid = Math.floor((start + end) / 2);\n if (arr[mid] === target) {\n   return mid;\n }\n if (arr[mid] < target) {\n   return binarySearchHelper(arr, target, mid + 1, end);\n }\n if (arr[mid] > target) {\n   return binarySearchHelper(arr, target, start, mid - 1);\n }\n};\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst target = 5;\nconsole.log(binarySearch(arr, target));\n`;\n\nconst Landing = () => {\n  const [code, setCode] = useState(javascriptDefault);\n  const [customInput, setCustomInput] = useState(\"\");\n  const [outputDetails, setOutputDetails] = useState(null);\n  const [processing, setProcessing] = useState(null);\n  const [theme, setTheme] = useState(\"cobalt\");\n  const [language, setLanguage] = useState(languageOptions[0]);\n\n  const enterPress = useKeyPress(\"Enter\");\n  const ctrlPress = useKeyPress(\"Control\");\n\n  const onSelectChange = (sl) => {\n    console.log(\"selected Option...\", sl);\n    setLanguage(sl);\n  };\n\n  useEffect(() => {\n    if (enterPress && ctrlPress) {\n      console.log(\"enterPress\", enterPress);\n      console.log(\"ctrlPress\", ctrlPress);\n      handleCompile();\n    }\n  }, [ctrlPress, enterPress]);\n  const onChange = (action, data) => {\n    switch (action) {\n      case \"code\": {\n        setCode(data);\n        break;\n      }\n      default: {\n        console.warn(\"case not handled!\", action, data);\n      }\n    }\n  };\n\n  // for code editor window\n\n  const [editorContent, setEditorContent] = useState(\"\"); // State to store the editor content\n\n  const handleEditorContentChange = (newContent) => {\n    setEditorContent(newContent); // Update editor content when it changes\n  };\n\n  const handleCompile = () => {\n    setProcessing(true);\n    const formData = {\n      language_id: language.id,\n      // encode source code in base64\n      source_code: btoa(code),\n      stdin: btoa(customInput),\n    };\n    const options = {\n      method: \"POST\",\n      url: process.env.REACT_APP_RAPID_API_URL,\n      params: { base64_encoded: \"true\", fields: \"*\" },\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-RapidAPI-Host\": process.env.REACT_APP_RAPID_API_HOST,\n        \"X-RapidAPI-Key\": process.env.REACT_APP_RAPID_API_KEY,\n      },\n      data: formData,\n    };\n\n    axios\n      .request(options)\n      .then(function (response) {\n        console.log(\"res.data\", response.data);\n        const token = response.data.token;\n        checkStatus(token);\n      })\n      .catch((err) => {\n        let error = err.response ? err.response.data : err;\n        // get error status\n        let status = err.response.status;\n        console.log(\"status\", status);\n        if (status === 429) {\n          console.log(\"too many requests\", status);\n\n          showErrorToast(\n            `Quota of 100 requests exceeded for the Day! Please read the blog on freeCodeCamp to learn how to setup your own RAPID API Judge0!`,\n            10000\n          );\n        }\n        setProcessing(false);\n        console.log(\"catch block...\", error);\n      });\n  };\n\n  const checkStatus = async (token) => {\n    const options = {\n      method: \"GET\",\n      url: process.env.REACT_APP_RAPID_API_URL + \"/\" + token,\n      params: { base64_encoded: \"true\", fields: \"*\" },\n      headers: {\n        \"X-RapidAPI-Host\": process.env.REACT_APP_RAPID_API_HOST,\n        \"X-RapidAPI-Key\": process.env.REACT_APP_RAPID_API_KEY,\n      },\n    };\n    try {\n      let response = await axios.request(options);\n      let statusId = response.data.status?.id;\n\n      // Processed - we have a result\n      if (statusId === 1 || statusId === 2) {\n        // still processing\n        setTimeout(() => {\n          checkStatus(token);\n        }, 2000);\n        return;\n      } else {\n        setProcessing(false);\n        setOutputDetails(response.data);\n        showSuccessToast(`Compiled Successfully!`);\n        console.log(\"response.data\", response.data);\n        return;\n      }\n    } catch (err) {\n      console.log(\"err\", err);\n      setProcessing(false);\n      showErrorToast();\n    }\n  };\n\n  function handleThemeChange(th) {\n    const theme = th;\n    console.log(\"theme...\", theme);\n\n    if ([\"light\", \"vs-dark\"].includes(theme.value)) {\n      setTheme(theme);\n    } else {\n      defineTheme(theme.value).then((_) => setTheme(theme));\n    }\n  }\n  useEffect(() => {\n    defineTheme(\"oceanic-next\").then((_) =>\n      setTheme({ value: \"oceanic-next\", label: \"Oceanic Next\" })\n    );\n  }, []);\n\n  const showSuccessToast = (msg) => {\n    toast.success(msg || `Compiled Successfully!`, {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  };\n  const showErrorToast = (msg, timer) => {\n    toast.error(msg || `Something went wrong! Please try again.`, {\n      position: \"top-right\",\n      autoClose: timer ? timer : 1000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  };\n\n  return (\n    <>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n\n      {/* <a\n        href=\"https://github.com/manuarora700/react-code-editor\"\n        title=\"Fork me on GitHub\"\n        class=\"github-corner\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <svg\n          width=\"50\"\n          height=\"50\"\n          viewBox=\"0 0 250 250\"\n          className=\"relative z-20 h-20 w-20\"\n        >\n          <title>Fork me on GitHub</title>\n          <path d=\"M0 0h250v250\"></path>\n          <path\n            d=\"M127.4 110c-14.6-9.2-9.4-19.5-9.4-19.5 3-7 1.5-11 1.5-11-1-6.2 3-2 3-2 4 4.7 2 11 2 11-2.2 10.4 5 14.8 9 16.2\"\n            fill=\"currentColor\"\n            style={{ transformOrigin: \"130px 110px\" }}\n            class=\"octo-arm\"\n          ></path>\n          <path\n            d=\"M113.2 114.3s3.6 1.6 4.7.6l15-13.7c3-2.4 6-3 8.2-2.7-8-11.2-14-25 3-41 4.7-4.4 10.6-6.4 16.2-6.4.6-1.6 3.6-7.3 11.8-10.7 0 0 4.5 2.7 6.8 16.5 4.3 2.7 8.3 6 12 9.8 3.3 3.5 6.7 8 8.6 12.3 14 3 16.8 8 16.8 8-3.4 8-9.4 11-11.4 11 0 5.8-2.3 11-7.5 15.5-16.4 16-30 9-40 .2 0 3-1 7-5.2 11l-13.3 11c-1 1 .5 5.3.8 5z\"\n            fill=\"currentColor\"\n            class=\"octo-body\"\n          ></path>\n        </svg>\n      </a> */}\n\n      {/* <div className=\"h-4 w-full bg-gradient-to-r from-pink-500 via-red-500 to-yellow-500\"></div> */}\n      <div className=\"flex flex-row\">\n        <img\n          src={harvest_logo}\n          alt=\"Your Image Description\"\n          className=\"text-center py-3 font-bold text-2xl\"\n          style={{\n            width: '200px',\n            height: 'auto',\n            marginLeft: \"15px\"\n          }}\n        />\n        <div className=\"px-6 py-4\">\n          <LanguagesDropdown onSelectChange={onSelectChange} />\n        </div>\n        <div className=\"px-6 py-4\">\n          <ThemeDropdown handleThemeChange={handleThemeChange} theme={theme} />\n        </div>\n      </div>\n      <div className=\"flex flex-row space-x-4 items-start\">\n        <div className=\"right-container flex flex-shrink-0 w-[4%] flex-col\">\n          <Sidebar\n            collapsed={true}\n          >\n            <Menu\n              menuItemStyles={{\n                button: {\n                  // the active class will be added automatically by react router\n                  // so we can use it to style the active menu item\n                  [`&.active`]: {\n                    backgroundColor: '#13395e',\n                    color: '#b6c8d9',\n                  },\n                },\n              }}\n            >\n              <MenuItem style={{ padding: '20px' }}> <FontAwesomeIcon icon={faFileCode} style={{ width: '25px', height: 'auto' }} /> </MenuItem>\n              <MenuItem style={{ padding: '20px' }}> <FontAwesomeIcon icon={faFileExcel} style={{ width: '25px', height: 'auto' }} /> </MenuItem>\n\n            </Menu>\n          </Sidebar>\n        </div>\n\n        <div className=\"flex flex-col w-full h-full justify-start items-end\">\n          <CodeEditorWindow\n            code={code}\n            onChange={onChange}\n            language={language?.value}\n            theme={theme.value}\n            handleEditorContentChange={handleEditorContentChange} \n          />\n        </div>\n\n        <div className=\"right-container flex flex-shrink-0 w-[30%] flex-col\">\n          <Copilot \n          editorContent={editorContent} \n          />\n        </div>\n      </div>\n      {/* <Footer /> */}\n    </>\n  );\n};\nexport default Landing;\n","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/LanguagesDropdown.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/CodeEditorWindow.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/OutputDetails.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/Footer.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/ThemeDropdown.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/OutputWindow.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/Copilot.js",["96"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport harvest_logo from './copilot_logo_gray.png'; // Import the image\n// import Head from 'next/head'\n// import Image from 'next/image'\n// import { Inter } from 'next/font/google'\n// import styles from '@/styles/Home.module.css'\nimport axios from 'axios';\nimport { TypeAnimation } from 'react-type-animation';\n\n// const inter = Inter({ subsets: ['latin'] })\nlet currentCodeState = \"\";\nexport default function Copilot({ editorContent }) {\n\n  // editorContent is current user code \n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const conversationRef = React.useRef([{ role: \"system\", content: \"You are a help assistant looking to help a data anlayst in their workflow.\" }]);\n  useEffect(() => {\n    // When the editor content changes, update the inputValue state\n    currentCodeState = editorContent;\n  }, [editorContent]);\n\n  /*\"Here is my current code, I am trying to build some predictive model. Please try to categorize my code into one of the following...\n    1. Linear Regression\n    2. Multivariate Linear Regression\n    3. Polynomial Regression\n    4. Logistic Regression (binary classification)\n    5. Gaussian/stochastic process\n    6. Neural Network\n    7. Decision trees\n    8. Random Forests\n    9. Genetic algorithm\n    10. K-means clustering\n\n    Please tell me what you think my model does and make a guess for its intended purpose? Give 5 guesses. \n  \"*/\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n        setChatLog((prevChatLog) => [...prevChatLog, { type: \"user\", message: inputValue }]);\n\n        //const flag = \"add to chat log\";\n        sendMessage(inputValue);\n\n        setInputValue(\"\");\n    };\n\n    const sendMessage = (message) => {\n        const url = \"https://api.openai.com/v1/chat/completions\";\n        const apiKey = \"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\"; // Your OpenAI API key\n\n        // Include user context using the ref\n        const preface = \"Here is my current code: \";\n        const newline = \"\\n\";\n        const postfix = \"Please be concise in your reponse.\";\n        let final = preface + newline + currentCodeState + newline + message + newline + postfix;\n        conversationRef.current.push({ role: \"user\", content: final });\n        const data = {\n            model: \"gpt-3.5-turbo-0301\",\n            messages: conversationRef.current // Pass the entire conversation history here\n        };\n\n        setIsLoading(true);\n\n        axios\n            .post(url, data, {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                },\n            })\n            .then((response) => {\n                // Add the bot's response to the conversation history using the ref\n                conversationRef.current.push({ role: \"assistant\", content: response.data.choices[0].message.content });\n                \n                //if (flag == \"add to chat log\") {\n                setChatLog((prevChatLog) => [\n                    ...prevChatLog,\n                    { type: \"bot\", message: response.data.choices[0].message.content },\n                ]);\n                //}\n\n                setIsLoading(false);\n            })\n            .catch((error) => {\n                setIsLoading(false);\n                console.log(error);\n            });\n    };\n\n    return (\n        <div className=\"container mx-auto max-w-[700px]\">\n            <div className=\"flex flex-col h-screen bg-gray-900\" style={{ maxHeight: \"85vh\", backgroundColor: \"#efefef\" }}>\n                <img\n                    src={harvest_logo}\n                    alt=\"Your Image Description\"\n                    className=\"text-center py-3 font-bold text-2xl\"\n                    style={{\n                        width: '120px',\n                        height: 'auto',\n                        marginLeft: \"15px\"\n                    }}\n                />\n                <div className=\"flex-grow p-6\">\n                    <div className=\"flex flex-col space-y-4\">\n                        {\n                            chatLog.map((message, index) => (\n                                <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'\n                                    }`}>\n                                    <div className={`${message.type === 'user' ? 'lighter-orange' : 'gray'} rounded-lg p-2 max-w-sm`}>\n                                        {message.type === 'user' ? (\n                                            message.message\n                                        ) : (\n                                            <TypeAnimation\n                                                sequence={[\n                                                    message.message,\n                                                    () => {\n                                                        console.log('Sequence completed');\n                                                    },\n                                                ]}\n                                                wrapper=\"span\"\n                                                cursor={false}\n                                                style={{ fontSize: '1em', display: 'inline-block' }}\n                                            />\n                                        )}\n                                    </div>\n                                </div>\n                            ))\n                        }\n                        {\n                            isLoading &&\n                            <div key={chatLog.length} className=\"flex justify-start\">\n                                <div className=\"gray rounded-lg p-2 max-w-sm\">\n                                    <TypeAnimation\n                                        sequence={[\n                                            '.', // Types 'One'\n                                            100, // Waits 1s\n                                            '..', // Deletes 'One' and types 'Two'\n                                            200, // Waits 2s\n                                            '...', // Types 'Three' without deleting 'Two'\n                                            () => {\n                                                console.log('Sequence completed');\n                                            },\n                                        ]}\n                                        wrapper=\"span\"\n                                        cursor={true}\n                                        repeat={5}\n                                        style={{ fontSize: '1em', display: 'inline-block' }}\n                                    />\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n                <form onSubmit={handleSubmit} className=\"flex-none p-6\">\n                    <div style={{ position: 'relative' }}>\n                        <div className=\"flex rounded-lg border border-white-700 bg-white-800\">\n                            <input type=\"text\" className=\"flex-grow px-4 py-2 focus:outline-none\" style={{ backgroundColor: \"white\", color: \"gray\", borderRadius: \"8px\" }} placeholder=\"Type your message...\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n                            <button\n                                type=\"submit\"\n                                className=\"absolute right-0 top-0 bottom-0 m-auto rounded-lg px-4 py-2 font-semibold focus:outline-none hover:bg-purple-600 transition-colors duration-300\"\n                                style={{ background: 'transparent' }}\n                                onMouseEnter={(e) => e.target.style.color = '#fd7013'}\n                                onMouseLeave={(e) => e.target.style.color = 'black'}>\n                                <FontAwesomeIcon icon={faPaperPlane} />\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n","/Users/samkadaba/Desktop/Harvest.ai/demo/src/components/CustomInput.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/hooks/useKeyPress.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/utils/general.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/lib/defineTheme.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/constants/languageOptions.js",[],[],"/Users/samkadaba/Desktop/Harvest.ai/demo/src/constants/customStyles.js",[],[],{"ruleId":"97","severity":1,"message":"98","line":4,"column":10,"nodeType":"99","messageId":"100","endLine":4,"endColumn":20},{"ruleId":"97","severity":1,"message":"101","line":12,"column":8,"nodeType":"99","messageId":"100","endLine":12,"endColumn":14},{"ruleId":"97","severity":1,"message":"102","line":13,"column":8,"nodeType":"99","messageId":"100","endLine":13,"endColumn":20},{"ruleId":"97","severity":1,"message":"103","line":15,"column":8,"nodeType":"99","messageId":"100","endLine":15,"endColumn":19},{"ruleId":"97","severity":1,"message":"104","line":16,"column":8,"nodeType":"99","messageId":"100","endLine":16,"endColumn":21},{"ruleId":"97","severity":1,"message":"105","line":19,"column":35,"nodeType":"99","messageId":"100","endLine":19,"endColumn":42},{"ruleId":"97","severity":1,"message":"106","line":58,"column":23,"nodeType":"99","messageId":"100","endLine":58,"endColumn":37},{"ruleId":"97","severity":1,"message":"107","line":59,"column":10,"nodeType":"99","messageId":"100","endLine":59,"endColumn":23},{"ruleId":"97","severity":1,"message":"108","line":60,"column":10,"nodeType":"99","messageId":"100","endLine":60,"endColumn":20},{"ruleId":"109","severity":1,"message":"110","line":78,"column":6,"nodeType":"111","endLine":78,"endColumn":29,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":264,"column":9,"nodeType":"115","endLine":273,"endColumn":11},{"ruleId":"113","severity":1,"message":"114","line":101,"column":17,"nodeType":"115","endLine":110,"endColumn":19},"no-unused-vars","'classnames' is defined but never used.","Identifier","unusedVar","'Footer' is defined but never used.","'OutputWindow' is defined but never used.","'CustomInput' is defined but never used.","'OutputDetails' is defined but never used.","'SubMenu' is defined but never used.","'setCustomInput' is assigned a value but never used.","'outputDetails' is assigned a value but never used.","'processing' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleCompile'. Either include it or remove the dependency array.","ArrayExpression",["116"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"117","fix":"118"},"Update the dependencies array to be: [ctrlPress, enterPress, handleCompile]",{"range":"119","text":"120"},[2431,2454],"[ctrlPress, enterPress, handleCompile]"]